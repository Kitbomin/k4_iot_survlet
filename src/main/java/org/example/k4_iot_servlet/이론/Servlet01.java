package org.example.k4_iot_servlet.이론;

/*
 * === 서블릿(Servlet) ===
 *
 * 1. 서블릿이란?
 *  : 자바(Java)로 웹 서버에서 동작하는 프로그램
 *  - 자바 기반의 웹 어플리케이션을 만들기 위한 가장 기초 기술
 *  >> 클라이언트의 요청(Request)를 처리하고, 응답(Response)를 생성하는 역할을 담당함
 *
 *      cf) 웹서버: 클라이언트-서버 구조에서 HTTP 요청을 받음
 *          >> 정적인 응답에 대한 처리가 가능함 (HTML 파일만 보여줘, PDF 파일 보여줘 등등)
 *
 *      +) 요청이 Java 코드에 대한 실행을 동반하는 경우 (로그인, 회원가입, 게시판 글 작성 등)
 *          >> 웹 서버가 혼자 처리를 못함
 *          >> 이걸 처리해주는게 WAS(Web Application Server) 가 대신 처리
 *
 *      +) Servlet과 Spring Boot의 WAS 서버는 톰캣이 그 역할을 함 -> Java 전용 WAS 정도라 생각하면 됨
 *          -> 사용자 요청에 동적 처리가 필요한 경우 톰캣이 해당 요청을 받음
 *          -> 톰캣이 자바 코드를 실행함 (Servlet | JSP 등)
 *          -> 결과로 HTML 등을 생성
 *          -> 웹 서버 또는 클라이언트에게 다시 전달하는 동작을 함
 *
 * 2. 서블릿 동작 흐름
 *  : 웹 브라우저가 서버로 HTTP 요청을 보낼 때, 서블릿의 동작 흐름
 *      [브라우저] - 사용자로부터 요청을 보냄 (Get, Post, Put, DELETE ... )
 *      [웹 서버(Tomcat)] - 요청을 받아 해당 URL에 맞는 서블릿에 전달
 *      [서블릿 컨테이너] - 서블릿을 관리, 생명주기(life Cycle) 관리, 요청/응답 객체 전달
 *      [서블릿 클래스] - 실제로 요청을 처리하는 비즈니스 로직 담당자
 *      [응답 반환] - 결과를 HTML, JSON 등으로 생성해 브라우저로 반환
 *
 * 3. 서블릿 컨테이너 (Tomcat)
 *  : 서블릿 생성과 초기화, 서비스 요청 전달과 종료의 모든 작업을 관리
 *  - HttpServletRequest와 HttpServletResponse 객체를 생성해 서블릿에게 전달함
 *
 * 4. 서블릿과 스프링의 관계
 *  : Spring Framework는 내부적으로 서블릿을 기반으로 동작함
 *  - 스프링의 기초가 되는 기술임
 *
 *      1) 서블릿: 모든 일을 직접 처리함
 *          >> 요청 처리, 응답 생성을 모두 서블릿 내에서 동작시킴
 *
 *      2) 스프링: DispatcherServlet(매니저)가 일처리를 지시함
 *          >> 요청을 받아 컨트롤러, 서비스, 리포지토리 등의 역할을 분담시킴
 *              + 결과를 모아 응답을 전송해줌 
 */


public class Servlet01 {
}










